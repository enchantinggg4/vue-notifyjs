{"version":3,"file":null,"sources":["../src/Notification.js","../src/Notifications.js","../src/index.js"],"sourcesContent":["export default {\n    name: 'notification',\n    props: {\n        message: String,\n        icon: String,\n        verticalAlign: {\n            type: String,\n            default: 'top',\n            validator: (value) => {\n                let acceptedValues = ['top', 'bottom']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        horizontalAlign: {\n            type: String,\n            default: 'center',\n            validator: (value) => {\n                let acceptedValues = ['left', 'center', 'right']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        type: {\n            type: String,\n            default: 'info',\n            validator: (value) => {\n                let acceptedValues = ['info', 'primary', 'danger', 'warning', 'success']\n                return acceptedValues.indexOf(value) !== -1\n            }\n        },\n        timeout: {\n            type: Number,\n            default: 5000,\n            validator: (value) => {\n                return value > 0\n            }\n        },\n        timestamp: {\n            type: Date,\n            default: () => new Date()\n        },\n        component: {\n            type: [Object, Function]\n        }\n    },\n    data () {\n        return {\n            elmHeight: 0\n        }\n    },\n    computed: {\n        hasIcon () {\n            return this.icon && this.icon.length > 0\n        },\n        alertType () {\n            return `alert-${this.type}`\n        },\n        customPosition () {\n            let initialMargin = this.$notifications.settings[\"initialMargin\"] || 20;\n            let alertHeight = this.elmHeight + 10;\n            let sameAlertsCount = this.$notifications.state.filter((alert) => {\n                return alert.horizontalAlign === this.horizontalAlign && alert.verticalAlign === this.verticalAlign && alert.timestamp <= this.timestamp\n            }).length\n            if (this.$notifications.settings.overlap) {\n                sameAlertsCount = 1\n            }\n            let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin\n            let styles = {}\n            if (this.verticalAlign === 'top') {\n                styles.top = `${pixels}px`\n            } else {\n                styles.bottom = `${pixels}px`\n            }\n            return styles\n        }\n    },\n    methods: {\n        close () {\n            this.$emit('close', this.timestamp)\n        }\n    },\n    mounted () {\n        this.elmHeight = this.$el.clientHeight\n        if (this.timeout) {\n            setTimeout(this.close, this.timeout)\n        }\n    },\n\n    render(h){\n        let componentName = this.component\n        return (\n            <div onClick={this.close}\n                 data-notify=\"container\"\n                 class={['alert open ', {'alert-with-icon': this.icon}, this.verticalAlign, this.horizontalAlign, this.alertType]}\n                 role=\"alert\"\n                 style={this.customPosition}\n                 data-notify-position=\"top-center\">\n                <button\n                    type=\"button\"\n                    aria-hidden=\"true\"\n                    class=\"close col-xs-1\"\n                    data-notify=\"dismiss\"\n                    onClick={this.close}>Ã—\n                </button>\n                {\n                    this.icon && <span data-notify=\"icon\" class={['alert-icon', this.icon]}></span>\n                }\n                <span data-notify=\"message\">\n            {this.message !== undefined && this.message}\n                    {this.component !== undefined &&\n                    <this.component></this.component>}\n        </span>\n            </div>\n        )\n    }\n}\n","import Notification from './Notification.js'\nexport default {\n    props: {\n        transitionName: {\n            type: String,\n            default: 'list'\n        },\n        transitionMode: {\n            type: String,\n            default: 'in-out'\n        },\n        overlap: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data () {\n        return {\n            notifications: this.$notifications.state\n        }\n    },\n    methods: {\n        removeNotification (timestamp) {\n            this.$notifications.removeNotification(timestamp)\n        }\n    },\n    created(){\n        this.$notifications.settings.overlap = this.overlap\n    },\n    render(){\n        const renderedNotifications = this.$notifications.state.map((notification, index) => {\n                return <Notification\n                    horizontalAlign={notification.horizontalAlign}\n                    verticalAlign={notification.verticalAlign}\n                    icon={notification.icon}\n                    message={notification.message}\n                    timeout={notification.timeout}\n                    type={notification.type}\n                    component={notification.component}\n                    timestamp={notification.timestamp}\n                    key={notification.timestamp.getTime()} onClose={this.removeNotification}/>\n            }\n        )\n        return (\n            <div class=\"notifications\">\n                <transition-group name={this.transitionName} mode={this.transitionMode}>\n                    {renderedNotifications}\n                </transition-group>\n            </div>\n        )\n    },\n    watch: {\n        overlap: function (newVal) {\n            this.$notifications.settings.overlap = newVal\n        }\n    }\n}\n","import Notifications from './Notifications.js'\n\nconst NotificationStore = {\n    state: [], // here the notifications will be added\n    settings: {\n        overlap: false,\n        initialMargin: 20\n    },\n    removeNotification (timestamp) {\n        const indexToDelete = this.state.findIndex(n => n.timestamp === timestamp)\n        if (indexToDelete !== -1) {\n            this.state.splice(indexToDelete, 1)\n        }\n    },\n    removeNotificationByObject (obj) {\n        const indexToDelete = this.state.indexOf(obj);\n        if (indexToDelete !== -1) {\n            this.state.splice(indexToDelete, 1)\n        }\n    },\n    removeNotificationByIndex (indexToDelete) {\n        if (indexToDelete !== -1) {\n            this.state.splice(indexToDelete, 1)\n        }\n    },\n    addNotification(notification){\n        notification.timestamp = new Date()\n        notification.timestamp.setMilliseconds(notification.timestamp.getMilliseconds() + this.state.length)\n        this.state.push(notification);\n        return notification;\n    },\n    notify (notification) {\n        if (Array.isArray(notification)) {\n            return notification.map((notificationInstance) => {\n                return this.addNotification(notificationInstance)\n            })\n        } else {\n            return this.addNotification(notification)\n        }\n\n    }\n}\n\nvar NotificationsPlugin = {\n    install (Vue) {\n        Vue.mixin({\n            data(){\n                return {\n                    notificationStore: NotificationStore\n                }\n            },\n            methods: {\n                notify(notification) {\n                    return this.notificationStore.notify(notification);\n                }\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notify', {\n            get () {\n                return this.$root.notify\n            }\n        })\n        Object.defineProperty(Vue.prototype, '$notifications', {\n            get () {\n                return this.$root.notificationStore\n            }\n        })\n        Vue.component('Notifications', Notifications)\n    }\n}\n\nexport default NotificationsPlugin\n"],"names":["String","value","indexOf","Number","Date","Object","Function","this","icon","length","type","initialMargin","$notifications","settings","alertHeight","elmHeight","sameAlertsCount","state","filter","alert","horizontalAlign","_this","verticalAlign","timestamp","overlap","pixels","styles","top","bottom","$emit","$el","clientHeight","timeout","close","h","component","alert-with-icon","alertType","style","customPosition","data-notify","undefined","message","Boolean","removeNotification","renderedNotifications","map","notification","index","getTime","class","name","transitionName","mode","transitionMode","newVal","NotificationStore","indexToDelete","findIndex","n","splice","obj","setMilliseconds","getMilliseconds","push","Array","isArray","notificationInstance","addNotification","Vue","mixin","notificationStore","notify","defineProperty","prototype","$root","Notifications"],"mappings":"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"}